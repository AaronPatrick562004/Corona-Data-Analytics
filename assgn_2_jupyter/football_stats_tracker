import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt

# URL for La Liga match results
url = "https://fbref.com/en/comps/12/schedule/La-Liga-Scores-and-Fixtures"

# Send GET request
headers = {"User-Agent": "Mozilla/5.0"}
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.content, "html.parser")

# Find match table
table = soup.select_one("table.stats_table")

# Extract match data correctly
matches = []
for row in table.find_all("tr")[1:]:  # Skip header row
    cols = row.find_all(["th", "td"])
    if len(cols) < 14:
        continue  # Skip incomplete rows

    # Assign each column to its corresponding new heading
    wk = cols[0].text.strip()
    day = cols[1].text.strip()
    date = cols[2].text.strip()
    time = cols[3].text.strip()
    home_team = cols[4].text.strip()
    home_xG = cols[5].text.strip()
    score = cols[6].text.strip()  # Match score
    away_xG = cols[7].text.strip()
    away_team = cols[8].text.strip()
    attendance = cols[9].text.strip()
    venue = cols[10].text.strip()
    referee = cols[11].text.strip()
    match_report = cols[12].text.strip()
    notes = cols[13].text.strip()

    matches.append([wk, day, date, time, home_team, home_xG, score, away_xG, away_team, attendance, venue, referee, match_report, notes])

# Convert to DataFrame
df = pd.DataFrame(matches, columns=["Wk", "Day", "Date", "Time", "Home", "xG (Home)", "Score", "xG (Away)", "Away", "Attendance", "Venue", "Referee", "Match Report", "Notes"])

# Display Title and First 10 Matches
print("\n🔹 La Liga - Match Fixtures 🔹\n")
print(df.head(10).to_string(index=False))



# Ensure score column is valid
if not df["Score"].isnull().all():
    # Split Score into Home & Away Goals safely
    df[['Home Goals', 'Away Goals']] = df['Score'].str.split("–", expand=True)

    # Convert to integers, handling errors by replacing with NaN
    df['Home Goals'] = pd.to_numeric(df['Home Goals'], errors='coerce')
    df['Away Goals'] = pd.to_numeric(df['Away Goals'], errors='coerce')

    # Drop rows where goals couldn't be parsed
    df = df.dropna(subset=["Home Goals", "Away Goals"]).astype({"Home Goals": int, "Away Goals": int})

    # Classify Match Results
    df['Result'] = df.apply(lambda x: "Home Win" if x["Home Goals"] > x["Away Goals"]
                            else ("Away Win" if x["Home Goals"] < x["Away Goals"] else "Draw"), axis=1)

    # Count Match Results
    result_counts = df['Result'].value_counts()

    # Plot Bar Chart: Home Wins vs. Away Wins vs. Draws
    plt.figure(figsize=(7, 5))
    plt.bar(result_counts.index, result_counts.values, color=['blue', 'red', 'gray'])
    plt.title("La Liga Match Results - Home vs. Away vs. Draws")
    plt.xlabel("Match Result")
    plt.ylabel("Count")
    plt.show()
else:
    print("⚠️ No valid scores found, skipping result calculations.")



# --- SORTING OPTIONS ---
# Sort matches by Date (oldest first)
df = df.sort_values(by="Date")

# --- FILTERING OPTIONS ---
# View matches for a specific team
team_name = "Real Madrid"  # Change team name here
team_matches = df[(df["Home"] == team_name) | (df["Away"] == team_name)]
print(f"\n📌 Matches involving {team_name}:\n")
print(team_matches.to_string(index=False))


# View matches with a specific result type (Home Win, Away Win, Draw)
match_result = "Draw"  # Change to "Home Win" or "Away Win"
filtered_matches = df[df["Result"] == match_result]
print(f"\n📊 {match_result} Matches:\n")
print(filtered_matches.to_string(index=False))


# View top-scoring matches (sorted by total goals)
df["Total Goals"] = df["Home Goals"] + df["Away Goals"]
top_scoring_matches = df.sort_values(by="Total Goals", ascending=False).head(5)
print("\n🔥 Top Scoring Matches:\n")
print(top_scoring_matches.to_string(index=False))
